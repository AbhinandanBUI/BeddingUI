{
  "components": {
      "schemas": {
          "Album": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/MusicElement"
                  },
                  {
                      "properties": {
                          "artists": {
                              "items": {
                                  "$ref": "#/components/schemas/Artist"
                              },
                              "type": "array"
                          },
                          "songs": {
                              "items": {
                                  "$ref": "#/components/schemas/Song"
                              },
                              "type": "array"
                          },
                          "year": {
                              "type": "integer"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "Artist": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/MusicElement"
                  },
                  {
                      "properties": {},
                      "type": "object"
                  }
              ]
          },
          "AudioEdit": {
              "properties": {
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "finished": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "input": {
                      "$ref": "#/components/schemas/AudioFile"
                  },
                  "output": {
                      "$ref": "#/components/schemas/AudioFile"
                  },
                  "progress": {
                      "format": "float",
                      "type": "number"
                  },
                  "shouldNormalize": {
                      "type": "boolean"
                  },
                  "status": {
                      "enum": [
                          "NOT_STARTED",
                          "IN_PROGRESS",
                          "FAILED",
                          "SUCCESS"
                      ],
                      "type": "string"
                  },
                  "type": {
                      "enum": [
                          "CONVERT_TO_MP3",
                          "CONVERT_TO_FLAC",
                          "CONVERT_TO_OGG",
                          "TRIM",
                          "MERGE"
                      ],
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "AudioFile": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/File"
                  },
                  {
                      "properties": {
                          "bitRate": {
                              "format": "uint",
                              "type": "integer"
                          },
                          "code": {
                              "type": "string"
                          },
                          "codeCount": {
                              "format": "uint",
                              "type": "integer"
                          },
                          "codeHash": {
                              "type": "string"
                          },
                          "duration": {
                              "format": "time",
                              "type": "string"
                          },
                          "format": {
                              "enum": [
                                  "M4A",
                                  "MP3",
                                  "OGG",
                                  "WAV",
                                  "FLAC",
                                  "UNKNOWN"
                              ],
                              "type": "string"
                          },
                          "start": {
                              "format": "time",
                              "type": "string"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "AudioFileImport": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/Import"
                  },
                  {
                      "properties": {
                          "file": {
                              "$ref": "#/components/schemas/AudioFile"
                          },
                          "suggestions": {
                              "$ref": "#/components/schemas/SongIdentifier"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "AudioUrlImport": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/Import"
                  },
                  {
                      "properties": {
                          "audio": {
                              "$ref": "#/components/schemas/AudioFile"
                          },
                          "url": {
                              "format": "url",
                              "type": "string"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "ClassTypeCondition": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/Condition"
                  },
                  {
                      "properties": {
                          "compareOperator": {
                              "enum": [
                                  "EQUAL",
                                  "NOTEQUAL"
                              ],
                              "type": "string"
                          },
                          "type": {
                              "type": "integer"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "Condition": {
              "properties": {
                  "classType": {
                      "enum": [
                          "NumberCondition",
                          "StringCondition",
                          "ClassTypeCondition"
                      ],
                      "type": "string"
                  },
                  "hasStaticValue": {
                      "type": "boolean"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "property": {
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "classType",
                  "property",
                  "hasStaticValue"
              ],
              "type": "object"
          },
          "ConfigSection": {
              "properties": {
                  "configuration": {
                      "items": {
                          "$ref": "#/components/schemas/Setting"
                      },
                      "type": "array"
                  },
                  "iconName": {
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "name": {
                      "format": "uniqueName",
                      "maxLength": 60,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z0-9_.-]*$",
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "Download": {
              "properties": {
                  "bytesLeft": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "bytesPerSeconds": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "checksum": {
                      "type": "string"
                  },
                  "contentType": {
                      "type": "string"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "currentSize": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "lastUpdate": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "percentage": {
                      "format": "float",
                      "type": "number"
                  },
                  "retries": {
                      "format": "uint",
                      "type": "integer"
                  },
                  "size": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "status": {
                      "enum": [
                          "NOT_STARTED",
                          "IN_PROGRESS",
                          "PAUSED",
                          "CANCELED",
                          "RESTARTED",
                          "FAILED",
                          "SUCCESS"
                      ],
                      "type": "string"
                  },
                  "url": {
                      "format": "url",
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "Event": {
              "properties": {
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "name": {
                      "format": "uniqueName",
                      "maxLength": 60,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z0-9_.-]*$",
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "File": {
              "properties": {
                  "classType": {
                      "enum": [
                          "ImageFile",
                          "TextFile",
                          "AudioFile"
                      ],
                      "type": "string"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "fileSize": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "hash": {
                      "format": "hash",
                      "pattern": "^[A-Fa-f0-9]{64}$",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "Filter": {
              "properties": {
                  "conditions": {
                      "items": {
                          "discriminator": {
                              "propertyName": "classType"
                          },
                          "oneOf": [
                              {
                                  "$ref": "#/components/schemas/NumberCondition"
                              },
                              {
                                  "$ref": "#/components/schemas/StringCondition"
                              },
                              {
                                  "$ref": "#/components/schemas/ClassTypeCondition"
                              }
                          ]
                      },
                      "type": "array"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "name": {
                      "format": "uniqueName",
                      "maxLength": 60,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z0-9_.-]*$",
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "ImageFile": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/File"
                  },
                  {
                      "properties": {
                          "format": {
                              "enum": [
                                  "JPEG",
                                  "PNG",
                                  "GIF",
                                  "WEBP",
                                  "TIFF",
                                  "BMP",
                                  "UNKNOWN"
                              ],
                              "type": "string"
                          },
                          "height": {
                              "format": "uint",
                              "type": "integer"
                          },
                          "width": {
                              "format": "uint",
                              "type": "integer"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "ImageUrlImport": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/Import"
                  },
                  {
                      "properties": {
                          "image": {
                              "$ref": "#/components/schemas/ImageFile"
                          },
                          "url": {
                              "format": "url",
                              "type": "string"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "Import": {
              "properties": {
                  "album": {
                      "$ref": "#/components/schemas/Album"
                  },
                  "classType": {
                      "enum": [
                          "AudioUrlImport",
                          "ImageUrlImport",
                          "AudioFileImport"
                      ],
                      "type": "string"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "finished": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "identified": {
                      "type": "boolean"
                  },
                  "progress": {
                      "format": "float",
                      "type": "number"
                  },
                  "song": {
                      "$ref": "#/components/schemas/Song"
                  },
                  "status": {
                      "enum": [
                          "NOT_STARTED",
                          "IN_PROGRESS",
                          "PAUSED",
                          "CANCELED",
                          "FAILED",
                          "SUCCESS",
                          "ACCEPTED"
                      ],
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "classType",
                  "status",
                  "created"
              ],
              "type": "object"
          },
          "MusicElement": {
              "properties": {
                  "classType": {
                      "enum": [
                          "Song",
                          "Album",
                          "Artist",
                          "Playlist"
                      ],
                      "type": "string"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "image": {
                      "$ref": "#/components/schemas/ImageFile"
                  },
                  "name": {
                      "type": "string"
                  },
                  "tags": {
                      "items": {
                          "$ref": "#/components/schemas/Tag"
                      },
                      "type": "array"
                  },
                  "visible": {
                      "type": "boolean"
                  }
              },
              "required": [
                  "id",
                  "classType",
                  "name",
                  "image",
                  "tags",
                  "visible"
              ],
              "type": "object"
          },
          "NumberCondition": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/Condition"
                  },
                  {
                      "properties": {
                          "compareOperator": {
                              "enum": [
                                  "GREATER",
                                  "SMALLER",
                                  "EQUAL",
                                  "NOTEQUAL"
                              ],
                              "type": "string"
                          },
                          "number": {
                              "format": "float",
                              "type": "number"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "PlayHistory": {
              "properties": {
                  "album": {
                      "$ref": "#/components/schemas/Album"
                  },
                  "duration": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "endTime": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "moveReason": {
                      "enum": [
                          "EndOfQueue",
                          "UserInteraction",
                          "AutoAdvance",
                          "SongComplete"
                      ],
                      "type": "string"
                  },
                  "nextSong": {
                      "$ref": "#/components/schemas/Song"
                  },
                  "playlist": {
                      "$ref": "#/components/schemas/Playlist"
                  },
                  "previousSong": {
                      "$ref": "#/components/schemas/Song"
                  },
                  "song": {
                      "$ref": "#/components/schemas/Song"
                  },
                  "startTime": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "userAction": {
                      "enum": [
                          "UserSelected",
                          "Skip",
                          "Repeat",
                          "AutoPlay",
                          "UNKNOWN"
                      ],
                      "type": "string"
                  },
                  "wasSkipped": {
                      "type": "boolean"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "Player": {
              "properties": {
                  "currentSong": {
                      "$ref": "#/components/schemas/Song"
                  },
                  "duration": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "mode": {
                      "enum": [
                          "SEQUENTIAL",
                          "LOOP_ONE_TRACK",
                          "LOOP_PLAYLIST"
                      ],
                      "type": "string"
                  },
                  "muted": {
                      "type": "boolean"
                  },
                  "playbackRate": {
                      "format": "float",
                      "type": "number"
                  },
                  "position": {
                      "format": "int64",
                      "type": "integer"
                  },
                  "random": {
                      "type": "boolean"
                  },
                  "source": {
                      "format": "url",
                      "type": "string"
                  },
                  "state": {
                      "enum": [
                          "PLAYING",
                          "PAUSED",
                          "STOPPED"
                      ],
                      "type": "string"
                  },
                  "volume": {
                      "type": "integer"
                  }
              },
              "required": [
                  "currentSong",
                  "position",
                  "duration",
                  "muted",
                  "volume",
                  "random",
                  "playbackRate",
                  "mode",
                  "state"
              ],
              "type": "object"
          },
          "Playlist": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/MusicElement"
                  },
                  {
                      "properties": {},
                      "type": "object"
                  }
              ]
          },
          "QueueItem": {
              "properties": {
                  "album": {
                      "$ref": "#/components/schemas/Album"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "position": {
                      "type": "integer"
                  },
                  "song": {
                      "$ref": "#/components/schemas/Song"
                  }
              },
              "required": [
                  "id",
                  "album",
                  "song",
                  "position"
              ],
              "type": "object"
          },
          "Setting": {
              "properties": {
                  "description": {
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "isDisabled": {
                      "type": "boolean"
                  },
                  "isHidden": {
                      "type": "boolean"
                  },
                  "name": {
                      "type": "string"
                  },
                  "subType": {
                      "type": "string"
                  },
                  "type": {
                      "enum": [
                          "Boolean",
                          "Number",
                          "String",
                          "Date",
                          "Url",
                          "Json",
                          "Enumeration"
                      ],
                      "type": "string"
                  },
                  "value": {
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          },
          "Song": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/MusicElement"
                  },
                  {
                      "properties": {
                          "artists": {
                              "items": {
                                  "$ref": "#/components/schemas/Artist"
                              },
                              "type": "array"
                          },
                          "file": {
                              "$ref": "#/components/schemas/AudioFile"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "SongIdentifier": {
              "properties": {
                  "albumSuggestions": {
                      "items": {
                          "$ref": "#/components/schemas/Album"
                      },
                      "type": "array"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "finished": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "incomplete": {
                      "$ref": "#/components/schemas/Song"
                  },
                  "songSuggestion": {
                      "$ref": "#/components/schemas/Song"
                  },
                  "status": {
                      "enum": [
                          "NOT_STARTED",
                          "IN_PROGRESS",
                          "FILE_ANALIZED",
                          "CANCELED",
                          "FAILED",
                          "SUCCESS"
                      ],
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "incomplete",
                  "songSuggestion",
                  "albumSuggestions"
              ],
              "type": "object"
          },
          "StringCondition": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/Condition"
                  },
                  {
                      "properties": {
                          "compareOperator": {
                              "enum": [
                                  "GREATER",
                                  "SMALLER",
                                  "EQUAL",
                                  "NOTEQUAL",
                                  "CONTAINS",
                                  "STARTSWITH",
                                  "ENDSWITH"
                              ],
                              "type": "string"
                          },
                          "value": {
                              "type": "string"
                          }
                      },
                      "type": "object"
                  }
              ]
          },
          "Tag": {
              "properties": {
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "isVisible": {
                      "type": "boolean"
                  },
                  "name": {
                      "type": "string"
                  },
                  "type": {
                      "enum": [
                          "Text",
                          "MusicElement",
                          "Url",
                          "Date"
                      ],
                      "type": "string"
                  },
                  "value": {
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "type"
              ],
              "type": "object"
          },
          "Webhook": {
              "properties": {
                  "callbackUrl": {
                      "format": "url",
                      "type": "string"
                  },
                  "created": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "events": {
                      "items": {
                          "$ref": "#/components/schemas/Event"
                      },
                      "type": "array"
                  },
                  "id": {
                      "format": "identifier",
                      "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                      "readOnly": true,
                      "type": "string"
                  },
                  "isActive": {
                      "type": "boolean"
                  }
              },
              "required": [
                  "id"
              ],
              "type": "object"
          }
      }
  },
  "info": {
      "contact": {
          "email": "peter@mail.com",
          "name": "peter",
          "url": "https://www.google.com"
      },
      "description": "An api to control your music library and music player.",
      "license": {
          "name": "bsd",
          "url": "https://www.google.com"
      },
      "termsOfService": "https://www.google.com",
      "title": "Documentation API",
      "version": "1.0.0"
  },
  "openapi": "3.0.2",
  "paths": {
      "/album": {
          "get": {
              "operationId": "Service::Album::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "name",
                              "created",
                              "visible",
                              "year"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Album"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Album(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Album"
              ]
          },
          "post": {
              "operationId": "Service::Album::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Album"
                          }
                      }
                  },
                  "description": "Album that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Album",
              "tags": [
                  "POST",
                  "Album"
              ]
          }
      },
      "/album/{id}": {
          "delete": {
              "operationId": "Service::Album::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Album using an id",
              "tags": [
                  "DELETE",
                  "Album"
              ]
          },
          "get": {
              "operationId": "Service::Album::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Album"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Album using an id",
              "tags": [
                  "GET",
                  "Album"
              ]
          },
          "put": {
              "operationId": "Service::Album::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Album"
                          }
                      }
                  },
                  "description": "Album that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Album using an id",
              "tags": [
                  "PUT",
                  "Album"
              ]
          }
      },
      "/artist": {
          "get": {
              "operationId": "Service::Artist::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "name",
                              "created",
                              "visible"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Artist"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Artist(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Artist"
              ]
          },
          "post": {
              "operationId": "Service::Artist::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Artist"
                          }
                      }
                  },
                  "description": "Artist that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Artist",
              "tags": [
                  "POST",
                  "Artist"
              ]
          }
      },
      "/artist/{id}": {
          "delete": {
              "operationId": "Service::Artist::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Artist using an id",
              "tags": [
                  "DELETE",
                  "Artist"
              ]
          },
          "get": {
              "operationId": "Service::Artist::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Artist"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Artist using an id",
              "tags": [
                  "GET",
                  "Artist"
              ]
          },
          "put": {
              "operationId": "Service::Artist::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Artist"
                          }
                      }
                  },
                  "description": "Artist that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Artist using an id",
              "tags": [
                  "PUT",
                  "Artist"
              ]
          }
      },
      "/audioedit": {
          "get": {
              "operationId": "Service::AudioEdit::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "status",
                              "type",
                              "progress",
                              "shouldNormalize",
                              "created",
                              "finished"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/AudioEdit"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns AudioEdit(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "AudioEdit"
              ]
          },
          "post": {
              "operationId": "Service::AudioEdit::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AudioEdit"
                          }
                      }
                  },
                  "description": "AudioEdit that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an AudioEdit",
              "tags": [
                  "POST",
                  "AudioEdit"
              ]
          }
      },
      "/audioedit/{id}": {
          "delete": {
              "operationId": "Service::AudioEdit::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an AudioEdit using an id",
              "tags": [
                  "DELETE",
                  "AudioEdit"
              ]
          },
          "get": {
              "operationId": "Service::AudioEdit::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AudioEdit"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an AudioEdit using an id",
              "tags": [
                  "GET",
                  "AudioEdit"
              ]
          },
          "put": {
              "operationId": "Service::AudioEdit::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AudioEdit"
                          }
                      }
                  },
                  "description": "AudioEdit that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an AudioEdit using an id",
              "tags": [
                  "PUT",
                  "AudioEdit"
              ]
          }
      },
      "/audiofile": {
          "get": {
              "operationId": "Service::AudioFile::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "fileSize",
                              "created",
                              "start",
                              "duration",
                              "format",
                              "bitRate",
                              "code",
                              "codeHash",
                              "codeCount"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/AudioFile"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns AudioFile(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "AudioFile"
              ]
          },
          "post": {
              "operationId": "Service::AudioFile::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/octet-stream": {
                          "schema": {
                              "format": "binary",
                              "type": "string"
                          }
                      }
                  },
                  "description": ""
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an AudioFile",
              "tags": [
                  "POST",
                  "AudioFile"
              ]
          }
      },
      "/audiofile/{id}": {
          "delete": {
              "operationId": "Service::AudioFile::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an AudioFile using an id",
              "tags": [
                  "DELETE",
                  "AudioFile"
              ]
          },
          "get": {
              "operationId": "Service::AudioFile::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AudioFile"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an AudioFile using an id",
              "tags": [
                  "GET",
                  "AudioFile"
              ]
          },
          "put": {
              "operationId": "Service::AudioFile::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/octet-stream": {
                          "schema": {
                              "format": "binary",
                              "type": "string"
                          }
                      }
                  },
                  "description": ""
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an AudioFile using an id",
              "tags": [
                  "PUT",
                  "AudioFile"
              ]
          }
      },
      "/audiofile/{id}/content": {
          "get": {
              "operationId": "Service::AudioFile::content",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "filename",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "format",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ogg",
                              "mp3",
                              "flac",
                              "wav"
                          ],
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "audio/mpeg": {
                              "schema": {
                                  "type": "string"
                              }
                          },
                          "audio/ogg": {
                              "schema": {
                                  "type": "string"
                              }
                          },
                          "audio/wav": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      },
                      "description": "audio file",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find image file",
                      "headers": {}
                  }
              },
              "summary": "Returns the content of a file",
              "tags": [
                  "GET",
                  "AudioFile"
              ]
          }
      },
      "/audiofileimport": {
          "get": {
              "operationId": "Service::AudioFileImport::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "progress",
                              "status",
                              "identified",
                              "created",
                              "finished"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/AudioFileImport"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns AudioFileImport(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "AudioFileImport"
              ]
          },
          "post": {
              "operationId": "Service::AudioFileImport::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AudioFileImport"
                          }
                      }
                  },
                  "description": "AudioFileImport that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an AudioFileImport",
              "tags": [
                  "POST",
                  "AudioFileImport"
              ]
          }
      },
      "/audiofileimport/{id}": {
          "delete": {
              "operationId": "Service::AudioFileImport::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an AudioFileImport using an id",
              "tags": [
                  "DELETE",
                  "AudioFileImport"
              ]
          },
          "get": {
              "operationId": "Service::AudioFileImport::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AudioFileImport"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an AudioFileImport using an id",
              "tags": [
                  "GET",
                  "AudioFileImport"
              ]
          },
          "put": {
              "operationId": "Service::AudioFileImport::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AudioFileImport"
                          }
                      }
                  },
                  "description": "AudioFileImport that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an AudioFileImport using an id",
              "tags": [
                  "PUT",
                  "AudioFileImport"
              ]
          }
      },
      "/audiourlimport": {
          "get": {
              "operationId": "Service::AudioUrlImport::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "progress",
                              "status",
                              "identified",
                              "created",
                              "finished",
                              "url"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/AudioUrlImport"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns AudioUrlImport(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "AudioUrlImport"
              ]
          },
          "post": {
              "operationId": "Service::AudioUrlImport::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AudioUrlImport"
                          }
                      }
                  },
                  "description": "AudioUrlImport that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an AudioUrlImport",
              "tags": [
                  "POST",
                  "AudioUrlImport"
              ]
          }
      },
      "/audiourlimport/{id}": {
          "delete": {
              "operationId": "Service::AudioUrlImport::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an AudioUrlImport using an id",
              "tags": [
                  "DELETE",
                  "AudioUrlImport"
              ]
          },
          "get": {
              "operationId": "Service::AudioUrlImport::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AudioUrlImport"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an AudioUrlImport using an id",
              "tags": [
                  "GET",
                  "AudioUrlImport"
              ]
          },
          "put": {
              "operationId": "Service::AudioUrlImport::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AudioUrlImport"
                          }
                      }
                  },
                  "description": "AudioUrlImport that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an AudioUrlImport using an id",
              "tags": [
                  "PUT",
                  "AudioUrlImport"
              ]
          }
      },
      "/condition": {
          "get": {
              "operationId": "Service::Condition::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "property",
                              "hasStaticValue"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/NumberCondition"
                                          },
                                          {
                                              "$ref": "#/components/schemas/StringCondition"
                                          },
                                          {
                                              "$ref": "#/components/schemas/ClassTypeCondition"
                                          }
                                      ],
                                      "discriminator": {
                                          "propertyName": "classType"
                                      }
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Condition(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Condition"
              ]
          },
          "post": {
              "operationId": "Service::Condition::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "discriminator": {
                                  "propertyName": "classType"
                              },
                              "oneOf": [
                                  {
                                      "$ref": "#/components/schemas/NumberCondition"
                                  },
                                  {
                                      "$ref": "#/components/schemas/StringCondition"
                                  },
                                  {
                                      "$ref": "#/components/schemas/ClassTypeCondition"
                                  }
                              ]
                          }
                      }
                  },
                  "description": "Condition that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Condition",
              "tags": [
                  "POST",
                  "Condition"
              ]
          }
      },
      "/condition/{id}": {
          "delete": {
              "operationId": "Service::Condition::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Condition using an id",
              "tags": [
                  "DELETE",
                  "Condition"
              ]
          },
          "get": {
              "operationId": "Service::Condition::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "discriminator": {
                                      "propertyName": "classType"
                                  },
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/NumberCondition"
                                      },
                                      {
                                          "$ref": "#/components/schemas/StringCondition"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ClassTypeCondition"
                                      }
                                  ]
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Condition using an id",
              "tags": [
                  "GET",
                  "Condition"
              ]
          },
          "put": {
              "operationId": "Service::Condition::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "discriminator": {
                                  "propertyName": "classType"
                              },
                              "oneOf": [
                                  {
                                      "$ref": "#/components/schemas/NumberCondition"
                                  },
                                  {
                                      "$ref": "#/components/schemas/StringCondition"
                                  },
                                  {
                                      "$ref": "#/components/schemas/ClassTypeCondition"
                                  }
                              ]
                          }
                      }
                  },
                  "description": "Condition that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Condition using an id",
              "tags": [
                  "PUT",
                  "Condition"
              ]
          }
      },
      "/configsection": {
          "get": {
              "operationId": "Service::ConfigSection::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "name",
                              "iconName"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/ConfigSection"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns ConfigSection(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "ConfigSection"
              ]
          },
          "post": {
              "operationId": "Service::ConfigSection::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ConfigSection"
                          }
                      }
                  },
                  "description": "ConfigSection that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an ConfigSection",
              "tags": [
                  "POST",
                  "ConfigSection"
              ]
          }
      },
      "/configsection/{id}": {
          "delete": {
              "operationId": "Service::ConfigSection::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an ConfigSection using an id",
              "tags": [
                  "DELETE",
                  "ConfigSection"
              ]
          },
          "get": {
              "operationId": "Service::ConfigSection::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ConfigSection"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an ConfigSection using an id",
              "tags": [
                  "GET",
                  "ConfigSection"
              ]
          },
          "put": {
              "operationId": "Service::ConfigSection::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ConfigSection"
                          }
                      }
                  },
                  "description": "ConfigSection that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an ConfigSection using an id",
              "tags": [
                  "PUT",
                  "ConfigSection"
              ]
          }
      },
      "/download": {
          "get": {
              "operationId": "Service::Download::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "url",
                              "status",
                              "size",
                              "currentSize",
                              "bytesLeft",
                              "bytesPerSeconds",
                              "percentage",
                              "retries",
                              "contentType",
                              "checksum",
                              "created",
                              "lastUpdate"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Download"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Download(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Download"
              ]
          },
          "post": {
              "operationId": "Service::Download::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Download"
                          }
                      }
                  },
                  "description": "Download that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Download",
              "tags": [
                  "POST",
                  "Download"
              ]
          }
      },
      "/download/{id}": {
          "delete": {
              "operationId": "Service::Download::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Download using an id",
              "tags": [
                  "DELETE",
                  "Download"
              ]
          },
          "get": {
              "operationId": "Service::Download::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Download"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Download using an id",
              "tags": [
                  "GET",
                  "Download"
              ]
          }
      },
      "/event": {
          "get": {
              "operationId": "Service::Event::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "name"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Event"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Event(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Event"
              ]
          }
      },
      "/event/{id}": {
          "get": {
              "operationId": "Service::Event::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Event"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Event using an id",
              "tags": [
                  "GET",
                  "Event"
              ]
          }
      },
      "/filter": {
          "get": {
              "operationId": "Service::Filter::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "name",
                              "description",
                              "created"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Filter"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Filter(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Filter"
              ]
          },
          "post": {
              "operationId": "Service::Filter::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Filter"
                          }
                      }
                  },
                  "description": "Filter that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Filter",
              "tags": [
                  "POST",
                  "Filter"
              ]
          }
      },
      "/filter/{id}": {
          "delete": {
              "operationId": "Service::Filter::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Filter using an id",
              "tags": [
                  "DELETE",
                  "Filter"
              ]
          },
          "get": {
              "operationId": "Service::Filter::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Filter"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Filter using an id",
              "tags": [
                  "GET",
                  "Filter"
              ]
          },
          "put": {
              "operationId": "Service::Filter::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Filter"
                          }
                      }
                  },
                  "description": "Filter that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Filter using an id",
              "tags": [
                  "PUT",
                  "Filter"
              ]
          }
      },
      "/imagefile": {
          "get": {
              "operationId": "Service::ImageFile::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "fileSize",
                              "created",
                              "width",
                              "height",
                              "format"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/ImageFile"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns ImageFile(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "ImageFile"
              ]
          },
          "post": {
              "operationId": "Service::ImageFile::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/octet-stream": {
                          "schema": {
                              "format": "binary",
                              "type": "string"
                          }
                      }
                  },
                  "description": ""
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an ImageFile",
              "tags": [
                  "POST",
                  "ImageFile"
              ]
          }
      },
      "/imagefile/{id}": {
          "delete": {
              "operationId": "Service::ImageFile::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an ImageFile using an id",
              "tags": [
                  "DELETE",
                  "ImageFile"
              ]
          },
          "get": {
              "operationId": "Service::ImageFile::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ImageFile"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an ImageFile using an id",
              "tags": [
                  "GET",
                  "ImageFile"
              ]
          },
          "put": {
              "operationId": "Service::ImageFile::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/octet-stream": {
                          "schema": {
                              "format": "binary",
                              "type": "string"
                          }
                      }
                  },
                  "description": ""
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an ImageFile using an id",
              "tags": [
                  "PUT",
                  "ImageFile"
              ]
          }
      },
      "/imagefile/{id}/content": {
          "get": {
              "operationId": "Service::ImageFile::content",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "filename",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "format",
                      "required": false,
                      "schema": {
                          "enum": [
                              "jpg",
                              "png"
                          ],
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "image/jpg": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      },
                      "description": "image file",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find image file",
                      "headers": {}
                  }
              },
              "summary": "Returns the content of a file",
              "tags": [
                  "GET",
                  "ImageFile"
              ]
          }
      },
      "/imageurlimport": {
          "get": {
              "operationId": "Service::ImageUrlImport::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "progress",
                              "status",
                              "identified",
                              "created",
                              "finished",
                              "url"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/ImageUrlImport"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns ImageUrlImport(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "ImageUrlImport"
              ]
          },
          "post": {
              "operationId": "Service::ImageUrlImport::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImageUrlImport"
                          }
                      }
                  },
                  "description": "ImageUrlImport that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an ImageUrlImport",
              "tags": [
                  "POST",
                  "ImageUrlImport"
              ]
          }
      },
      "/imageurlimport/{id}": {
          "delete": {
              "operationId": "Service::ImageUrlImport::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an ImageUrlImport using an id",
              "tags": [
                  "DELETE",
                  "ImageUrlImport"
              ]
          },
          "get": {
              "operationId": "Service::ImageUrlImport::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ImageUrlImport"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an ImageUrlImport using an id",
              "tags": [
                  "GET",
                  "ImageUrlImport"
              ]
          },
          "put": {
              "operationId": "Service::ImageUrlImport::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImageUrlImport"
                          }
                      }
                  },
                  "description": "ImageUrlImport that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an ImageUrlImport using an id",
              "tags": [
                  "PUT",
                  "ImageUrlImport"
              ]
          }
      },
      "/import": {
          "get": {
              "operationId": "Service::Import::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "progress",
                              "status",
                              "identified",
                              "created",
                              "finished"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/AudioUrlImport"
                                          },
                                          {
                                              "$ref": "#/components/schemas/ImageUrlImport"
                                          },
                                          {
                                              "$ref": "#/components/schemas/AudioFileImport"
                                          }
                                      ],
                                      "discriminator": {
                                          "propertyName": "classType"
                                      }
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Import(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Import"
              ]
          },
          "post": {
              "operationId": "Service::Import::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "discriminator": {
                                  "propertyName": "classType"
                              },
                              "oneOf": [
                                  {
                                      "$ref": "#/components/schemas/AudioUrlImport"
                                  },
                                  {
                                      "$ref": "#/components/schemas/ImageUrlImport"
                                  },
                                  {
                                      "$ref": "#/components/schemas/AudioFileImport"
                                  }
                              ]
                          }
                      }
                  },
                  "description": "Import that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Import",
              "tags": [
                  "POST",
                  "Import"
              ]
          }
      },
      "/import/{id}": {
          "delete": {
              "operationId": "Service::Import::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Import using an id",
              "tags": [
                  "DELETE",
                  "Import"
              ]
          },
          "get": {
              "operationId": "Service::Import::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "discriminator": {
                                      "propertyName": "classType"
                                  },
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/AudioUrlImport"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ImageUrlImport"
                                      },
                                      {
                                          "$ref": "#/components/schemas/AudioFileImport"
                                      }
                                  ]
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Import using an id",
              "tags": [
                  "GET",
                  "Import"
              ]
          },
          "put": {
              "operationId": "Service::Import::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "discriminator": {
                                  "propertyName": "classType"
                              },
                              "oneOf": [
                                  {
                                      "$ref": "#/components/schemas/AudioUrlImport"
                                  },
                                  {
                                      "$ref": "#/components/schemas/ImageUrlImport"
                                  },
                                  {
                                      "$ref": "#/components/schemas/AudioFileImport"
                                  }
                              ]
                          }
                      }
                  },
                  "description": "Import that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Import using an id",
              "tags": [
                  "PUT",
                  "Import"
              ]
          }
      },
      "/musicelement": {
          "get": {
              "operationId": "Service::MusicElement::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "name",
                              "created",
                              "visible"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/Song"
                                          },
                                          {
                                              "$ref": "#/components/schemas/Album"
                                          },
                                          {
                                              "$ref": "#/components/schemas/Artist"
                                          },
                                          {
                                              "$ref": "#/components/schemas/Playlist"
                                          }
                                      ],
                                      "discriminator": {
                                          "propertyName": "classType"
                                      }
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns MusicElement(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "MusicElement"
              ]
          },
          "post": {
              "operationId": "Service::MusicElement::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "discriminator": {
                                  "propertyName": "classType"
                              },
                              "oneOf": [
                                  {
                                      "$ref": "#/components/schemas/Song"
                                  },
                                  {
                                      "$ref": "#/components/schemas/Album"
                                  },
                                  {
                                      "$ref": "#/components/schemas/Artist"
                                  },
                                  {
                                      "$ref": "#/components/schemas/Playlist"
                                  }
                              ]
                          }
                      }
                  },
                  "description": "MusicElement that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an MusicElement",
              "tags": [
                  "POST",
                  "MusicElement"
              ]
          }
      },
      "/musicelement/{id}": {
          "delete": {
              "operationId": "Service::MusicElement::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an MusicElement using an id",
              "tags": [
                  "DELETE",
                  "MusicElement"
              ]
          },
          "get": {
              "operationId": "Service::MusicElement::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "discriminator": {
                                      "propertyName": "classType"
                                  },
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/Song"
                                      },
                                      {
                                          "$ref": "#/components/schemas/Album"
                                      },
                                      {
                                          "$ref": "#/components/schemas/Artist"
                                      },
                                      {
                                          "$ref": "#/components/schemas/Playlist"
                                      }
                                  ]
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an MusicElement using an id",
              "tags": [
                  "GET",
                  "MusicElement"
              ]
          },
          "put": {
              "operationId": "Service::MusicElement::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "discriminator": {
                                  "propertyName": "classType"
                              },
                              "oneOf": [
                                  {
                                      "$ref": "#/components/schemas/Song"
                                  },
                                  {
                                      "$ref": "#/components/schemas/Album"
                                  },
                                  {
                                      "$ref": "#/components/schemas/Artist"
                                  },
                                  {
                                      "$ref": "#/components/schemas/Playlist"
                                  }
                              ]
                          }
                      }
                  },
                  "description": "MusicElement that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an MusicElement using an id",
              "tags": [
                  "PUT",
                  "MusicElement"
              ]
          }
      },
      "/numbercondition": {
          "post": {
              "operationId": "Service::NumberCondition::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/NumberCondition"
                          }
                      }
                  },
                  "description": "NumberCondition that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an NumberCondition",
              "tags": [
                  "POST",
                  "NumberCondition"
              ]
          }
      },
      "/numbercondition/{id}": {
          "delete": {
              "operationId": "Service::NumberCondition::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an NumberCondition using an id",
              "tags": [
                  "DELETE",
                  "NumberCondition"
              ]
          },
          "get": {
              "operationId": "Service::NumberCondition::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/NumberCondition"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an NumberCondition using an id",
              "tags": [
                  "GET",
                  "NumberCondition"
              ]
          },
          "put": {
              "operationId": "Service::NumberCondition::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/NumberCondition"
                          }
                      }
                  },
                  "description": "NumberCondition that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an NumberCondition using an id",
              "tags": [
                  "PUT",
                  "NumberCondition"
              ]
          }
      },
      "/player": {
          "get": {
              "operationId": "Service::Player::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "source",
                              "position",
                              "duration",
                              "muted",
                              "volume",
                              "random",
                              "playbackRate",
                              "mode",
                              "state"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Player"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Player(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Player"
              ]
          }
      },
      "/player/{id}": {
          "get": {
              "operationId": "Service::Player::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Player"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Player using an id",
              "tags": [
                  "GET",
                  "Player"
              ]
          },
          "put": {
              "operationId": "Service::Player::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Player"
                          }
                      }
                  },
                  "description": "Player that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Player using an id",
              "tags": [
                  "PUT",
                  "Player"
              ]
          }
      },
      "/playhistory": {
          "get": {
              "operationId": "Service::PlayHistory::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "startTime",
                              "endTime",
                              "duration",
                              "wasSkipped",
                              "moveReason",
                              "userAction"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/PlayHistory"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns PlayHistory(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "PlayHistory"
              ]
          },
          "post": {
              "operationId": "Service::PlayHistory::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PlayHistory"
                          }
                      }
                  },
                  "description": "PlayHistory that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an PlayHistory",
              "tags": [
                  "POST",
                  "PlayHistory"
              ]
          }
      },
      "/playhistory/{id}": {
          "delete": {
              "operationId": "Service::PlayHistory::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an PlayHistory using an id",
              "tags": [
                  "DELETE",
                  "PlayHistory"
              ]
          },
          "get": {
              "operationId": "Service::PlayHistory::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/PlayHistory"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an PlayHistory using an id",
              "tags": [
                  "GET",
                  "PlayHistory"
              ]
          },
          "put": {
              "operationId": "Service::PlayHistory::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PlayHistory"
                          }
                      }
                  },
                  "description": "PlayHistory that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an PlayHistory using an id",
              "tags": [
                  "PUT",
                  "PlayHistory"
              ]
          }
      },
      "/playlist": {
          "get": {
              "operationId": "Service::Playlist::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "name",
                              "created",
                              "visible"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Playlist"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Playlist(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Playlist"
              ]
          },
          "post": {
              "operationId": "Service::Playlist::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Playlist"
                          }
                      }
                  },
                  "description": "Playlist that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Playlist",
              "tags": [
                  "POST",
                  "Playlist"
              ]
          }
      },
      "/playlist/{id}": {
          "delete": {
              "operationId": "Service::Playlist::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Playlist using an id",
              "tags": [
                  "DELETE",
                  "Playlist"
              ]
          },
          "get": {
              "operationId": "Service::Playlist::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Playlist"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Playlist using an id",
              "tags": [
                  "GET",
                  "Playlist"
              ]
          },
          "put": {
              "operationId": "Service::Playlist::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Playlist"
                          }
                      }
                  },
                  "description": "Playlist that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Playlist using an id",
              "tags": [
                  "PUT",
                  "Playlist"
              ]
          }
      },
      "/queueitem": {
          "get": {
              "operationId": "Service::QueueItem::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "position",
                              "created"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/QueueItem"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns QueueItem(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "QueueItem"
              ]
          },
          "post": {
              "operationId": "Service::QueueItem::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/QueueItem"
                          }
                      }
                  },
                  "description": "QueueItem that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an QueueItem",
              "tags": [
                  "POST",
                  "QueueItem"
              ]
          }
      },
      "/queueitem/{id}": {
          "delete": {
              "operationId": "Service::QueueItem::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an QueueItem using an id",
              "tags": [
                  "DELETE",
                  "QueueItem"
              ]
          },
          "get": {
              "operationId": "Service::QueueItem::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/QueueItem"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an QueueItem using an id",
              "tags": [
                  "GET",
                  "QueueItem"
              ]
          },
          "put": {
              "operationId": "Service::QueueItem::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/QueueItem"
                          }
                      }
                  },
                  "description": "QueueItem that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an QueueItem using an id",
              "tags": [
                  "PUT",
                  "QueueItem"
              ]
          }
      },
      "/setting": {
          "get": {
              "operationId": "Service::Setting::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "name",
                              "value",
                              "description",
                              "type",
                              "subType",
                              "isDisabled",
                              "isHidden"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Setting"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Setting(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Setting"
              ]
          },
          "post": {
              "operationId": "Service::Setting::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Setting"
                          }
                      }
                  },
                  "description": "Setting that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Setting",
              "tags": [
                  "POST",
                  "Setting"
              ]
          }
      },
      "/setting/{id}": {
          "delete": {
              "operationId": "Service::Setting::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Setting using an id",
              "tags": [
                  "DELETE",
                  "Setting"
              ]
          },
          "get": {
              "operationId": "Service::Setting::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Setting"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Setting using an id",
              "tags": [
                  "GET",
                  "Setting"
              ]
          },
          "put": {
              "operationId": "Service::Setting::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Setting"
                          }
                      }
                  },
                  "description": "Setting that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Setting using an id",
              "tags": [
                  "PUT",
                  "Setting"
              ]
          }
      },
      "/song": {
          "get": {
              "operationId": "Service::Song::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "classType",
                              "name",
                              "created",
                              "visible"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Song"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Song(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Song"
              ]
          },
          "post": {
              "operationId": "Service::Song::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Song"
                          }
                      }
                  },
                  "description": "Song that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Song",
              "tags": [
                  "POST",
                  "Song"
              ]
          }
      },
      "/song/{id}": {
          "delete": {
              "operationId": "Service::Song::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Song using an id",
              "tags": [
                  "DELETE",
                  "Song"
              ]
          },
          "get": {
              "operationId": "Service::Song::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Song"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Song using an id",
              "tags": [
                  "GET",
                  "Song"
              ]
          },
          "put": {
              "operationId": "Service::Song::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Song"
                          }
                      }
                  },
                  "description": "Song that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Song using an id",
              "tags": [
                  "PUT",
                  "Song"
              ]
          }
      },
      "/songidentifier": {
          "get": {
              "operationId": "Service::SongIdentifier::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "status",
                              "created",
                              "finished"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/SongIdentifier"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns SongIdentifier(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "SongIdentifier"
              ]
          },
          "post": {
              "operationId": "Service::SongIdentifier::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/SongIdentifier"
                          }
                      }
                  },
                  "description": "SongIdentifier that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an SongIdentifier",
              "tags": [
                  "POST",
                  "SongIdentifier"
              ]
          }
      },
      "/songidentifier/{id}": {
          "delete": {
              "operationId": "Service::SongIdentifier::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an SongIdentifier using an id",
              "tags": [
                  "DELETE",
                  "SongIdentifier"
              ]
          },
          "get": {
              "operationId": "Service::SongIdentifier::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SongIdentifier"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an SongIdentifier using an id",
              "tags": [
                  "GET",
                  "SongIdentifier"
              ]
          },
          "put": {
              "operationId": "Service::SongIdentifier::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/SongIdentifier"
                          }
                      }
                  },
                  "description": "SongIdentifier that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an SongIdentifier using an id",
              "tags": [
                  "PUT",
                  "SongIdentifier"
              ]
          }
      },
      "/stringcondition": {
          "post": {
              "operationId": "Service::StringCondition::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/StringCondition"
                          }
                      }
                  },
                  "description": "StringCondition that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an StringCondition",
              "tags": [
                  "POST",
                  "StringCondition"
              ]
          }
      },
      "/stringcondition/{id}": {
          "delete": {
              "operationId": "Service::StringCondition::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an StringCondition using an id",
              "tags": [
                  "DELETE",
                  "StringCondition"
              ]
          },
          "get": {
              "operationId": "Service::StringCondition::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/StringCondition"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an StringCondition using an id",
              "tags": [
                  "GET",
                  "StringCondition"
              ]
          },
          "put": {
              "operationId": "Service::StringCondition::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/StringCondition"
                          }
                      }
                  },
                  "description": "StringCondition that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an StringCondition using an id",
              "tags": [
                  "PUT",
                  "StringCondition"
              ]
          }
      },
      "/tag": {
          "get": {
              "operationId": "Service::Tag::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "name",
                              "value",
                              "type",
                              "isVisible",
                              "created"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Tag"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Tag(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Tag"
              ]
          },
          "post": {
              "operationId": "Service::Tag::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Tag"
                          }
                      }
                  },
                  "description": "Tag that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Tag",
              "tags": [
                  "POST",
                  "Tag"
              ]
          }
      },
      "/tag/{id}": {
          "delete": {
              "operationId": "Service::Tag::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Tag using an id",
              "tags": [
                  "DELETE",
                  "Tag"
              ]
          },
          "get": {
              "operationId": "Service::Tag::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Tag"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Tag using an id",
              "tags": [
                  "GET",
                  "Tag"
              ]
          },
          "put": {
              "operationId": "Service::Tag::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Tag"
                          }
                      }
                  },
                  "description": "Tag that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Tag using an id",
              "tags": [
                  "PUT",
                  "Tag"
              ]
          }
      },
      "/version": {
          "get": {
              "operationId": "Service::Version::getVersion",
              "parameters": [],
              "responses": {
                  "200": {
                      "content": {
                          "text/plain": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      },
                      "description": "test",
                      "headers": {}
                  }
              },
              "summary": "Returns the app version.\n",
              "tags": [
                  "GET",
                  "Version"
              ]
          }
      },
      "/webhook": {
          "get": {
              "operationId": "Service::Webhook::getPage",
              "parameters": [
                  {
                      "description": "the name of a Filter resource",
                      "in": "query",
                      "name": "filterName",
                      "required": false,
                      "schema": {
                          "format": "uniqueName",
                          "maxLength": 60,
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9_.-]*$",
                          "type": "string"
                      }
                  },
                  {
                      "description": "input parameter for the filter use ';' to separate values",
                      "in": "query",
                      "name": "values",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "sortBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "callbackUrl",
                              "isActive",
                              "created"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "orderBy",
                      "required": false,
                      "schema": {
                          "enum": [
                              "ASC",
                              "DESC"
                          ],
                          "type": "string"
                      }
                  },
                  {
                      "description": "",
                      "in": "query",
                      "name": "pageIndex",
                      "required": false,
                      "schema": {
                          "format": "uint",
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "items": {
                                      "$ref": "#/components/schemas/Webhook"
                                  },
                                  "type": "array"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns Webhook(s) using an filter.\n \t\t\t\t\tAdd an filter by using the '/filter' and '/condition' paths.\t\t\t\t\t\nYou can sort them by an property",
              "tags": [
                  "GET",
                  "Webhook"
              ]
          },
          "post": {
              "callbacks": {
                  "album.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "album.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Album"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "album.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "album.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Album"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "album.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "album.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Album"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "artist.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "artist.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Artist"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "artist.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "artist.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Artist"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "artist.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "artist.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Artist"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audioedit.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audioedit.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioEdit"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audioedit.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audioedit.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioEdit"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audioedit.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audioedit.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioEdit"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiofile.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiofile.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioFile"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiofile.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiofile.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioFile"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiofile.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiofile.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioFile"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiofileimport.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiofileimport.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioFileImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiourlimport.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiourlimport.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiourlimport.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiourlimport.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiourlimport.success": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiourlimport.success",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "audiourlimport.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "audiourlimport.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/AudioUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "configsection.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "configsection.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ConfigSection"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "configsection.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "configsection.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ConfigSection"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "configsection.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "configsection.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ConfigSection"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "download.failed": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "download.failed",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Download"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "download.progresschanged": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "download.progresschanged",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Download"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "download.success": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "download.success",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Download"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "imagefile.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "imagefile.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ImageFile"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "imagefile.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "imagefile.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ImageFile"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "imagefile.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "imagefile.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ImageFile"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "imageurlimport.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "imageurlimport.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ImageUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "imageurlimport.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "imageurlimport.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ImageUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "imageurlimport.success": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "imageurlimport.success",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ImageUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "imageurlimport.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "imageurlimport.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/ImageUrlImport"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "import.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "import.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Import"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "import.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "import.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Import"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "import.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "import.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Import"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "musicelement.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "musicelement.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/MusicElement"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "musicelement.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "musicelement.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/MusicElement"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "musicelement.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "musicelement.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/MusicElement"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "player.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "player.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Player"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "player.userinteraction": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "player.userinteraction",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Player"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "playhistory.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "playhistory.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/PlayHistory"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "playhistory.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "playhistory.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/PlayHistory"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "playhistory.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "playhistory.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/PlayHistory"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "playlist.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "playlist.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Playlist"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "playlist.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "playlist.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Playlist"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "playlist.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "playlist.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Playlist"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "queueitem.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "queueitem.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/QueueItem"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "queueitem.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "queueitem.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/QueueItem"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "queueitem.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "queueitem.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/QueueItem"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "setting.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "setting.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Setting"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "setting.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "setting.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Setting"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "setting.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "setting.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Setting"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "song.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "song.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Song"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "song.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "song.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Song"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "song.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "song.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Song"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "songidentifier.coverupdated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "songidentifier.coverupdated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/SongIdentifier"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "songidentifier.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "songidentifier.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/SongIdentifier"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "songidentifier.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "songidentifier.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/SongIdentifier"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "songidentifier.success": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "songidentifier.success",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/SongIdentifier"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "songidentifier.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "songidentifier.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/SongIdentifier"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "tag.erased": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "tag.erased",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Tag"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "tag.inserted": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "tag.inserted",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Tag"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  },
                  "tag.updated": {
                      "/{$request.body#/callbackurl}": {
                          "post": {
                              "operationId": "tag.updated",
                              "parameters": [],
                              "requestBody": {
                                  "content": {
                                      "application/json": {
                                          "schema": {
                                              "$ref": "#/components/schemas/Tag"
                                          }
                                      }
                                  },
                                  "description": ""
                              },
                              "responses": {
                                  "200": {
                                      "content": {},
                                      "description": "Your server should return this code if it accepts the callback",
                                      "headers": {}
                                  }
                              },
                              "tags": []
                          }
                      }
                  }
              },
              "operationId": "Service::Webhook::insert",
              "parameters": [],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Webhook"
                          }
                      }
                  },
                  "description": "Webhook that should be updated"
              },
              "responses": {
                  "201": {
                      "content": {},
                      "description": "schema",
                      "headers": {
                          "Location": {
                              "description": "the location of the newly created resource",
                              "required": false,
                              "schema": {
                                  "format": "url",
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "content": {},
                      "description": "Could not insert entity",
                      "headers": {}
                  }
              },
              "summary": "Creates an Webhook",
              "tags": [
                  "POST",
                  "Webhook"
              ]
          }
      },
      "/webhook/{id}": {
          "delete": {
              "operationId": "Service::Webhook::erase",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {},
                      "description": "Entity deleted successfully",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Deletes an Webhook using an id",
              "tags": [
                  "DELETE",
                  "Webhook"
              ]
          },
          "get": {
              "operationId": "Service::Webhook::get",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Webhook"
                              }
                          }
                      },
                      "description": "schema",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not find entity",
                      "headers": {}
                  }
              },
              "summary": "Returns an Webhook using an id",
              "tags": [
                  "GET",
                  "Webhook"
              ]
          },
          "put": {
              "operationId": "Service::Webhook::update",
              "parameters": [
                  {
                      "description": "The identifier of a resource",
                      "in": "path",
                      "name": "id",
                      "required": true,
                      "schema": {
                          "format": "identifier",
                          "pattern": "^[A-Fa-f0-9]{30}$|^(?![\\s\\S])$",
                          "readOnly": true,
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Webhook"
                          }
                      }
                  },
                  "description": "Webhook that should be updated"
              },
              "responses": {
                  "204": {
                      "content": {},
                      "description": "Entity updated",
                      "headers": {}
                  },
                  "404": {
                      "content": {},
                      "description": "Could not update entity",
                      "headers": {}
                  }
              },
              "summary": "Updates an Webhook using an id",
              "tags": [
                  "PUT",
                  "Webhook"
              ]
          }
      }
  },
  "servers": [
      {
          "description": "localhost",
          "url": "http://127.0.0.1:7789/api"
      }
  ]
}
